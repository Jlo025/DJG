//
//  main.swift
//  DjgTheMatrix
//
//  Created by Dominique Escoe on 11/12/24.
//

import Foundation




// ANSI color codes for green text
let greenText = "\u{001B}[0;32m"
let resetText = "\u{001B}[0m"

// Function to print a message in "Matrix style"
func printMatrixStyle(_ message: String) {
    for char in message {
        print("\(greenText)\(char)\(resetText)", terminator: "")
        fflush(stdout)
        usleep(15000) // Adjust the speed of character printing if needed
    }
    print()
}

// Function to handle user input with a prompt
func prompt(_ message: String) -> String {
    printMatrixStyle(message)
    guard let input = readLine(strippingNewline: true) else {
        return ""
    }
    return input.trimmingCharacters(in: .whitespacesAndNewlines)
}

// Function to print random 0s and 1s
func printMatrixCodeLines(lines: Int, length: Int) {
    for _ in 0..<lines {
        var line = ""
        for _ in 0..<length {
            line += Bool.random() ? "0" : "1"
        }
        print("\(greenText)\(line)\(resetText)")
        usleep(10000) // Adjust speed for aesthetic
    }
}

// Print "MATRIX" in a tech-style
func printMatrixHeader() {
    let matrixArt = """
                      THE 
 █████  ██       ██ ████     ███████  ██████ ██ █████  
██   ██ ██ ██    ██ ██  ██   ██   ██  ██  ██ ██ ██  ██ 
███████ ██   ██  ██ ██   ██  ████████ ██  ██ ██ ██   ██ 
██   ██ ██     ████ ██    ██ ██    ██ ██  ██ ██ ██    ██ 
██   ██ ██       ██ ██   ██  ██    ██ ██  ██ ██ ██   ██ 
██   ██ ██       ██ ██████   ██    ██ ██████ ██ █████ 

                     MATRIX
                                     █  █
                                   ████████
                                  ██████████
                                  ██████████
                                   ████████
                                 ████████████
                              █ ██████████████ █
                             ██ ██████████████ ██
                             ██ ██████████████ ██
                             ██ ██████████████ ██
                                ██████████████
                                    ██   ██
       █  █                         ██   ██
     ████████
    ██████████
    ██████████
     ████████
    ████████████
 █ ██████████████ █
██ ██████████████ ██
██ ██████████████ ██
██ ██████████████ ██
   ██████████████
      ██   ██
      ██   ██                        █  █
                                   ████████
                                  ██████████
                                  ██████████
                                   ████████
                                 ████████████
                              █ ██████████████ █
                             ██ ██████████████ ██
                             ██ ██████████████ ██
                             ██ ██████████████ ██
                                ██████████████
                                    ██   ██
                                    ██   ██
"""
    
    
    print("\(greenText)\(matrixArt)\(resetText)")
}

// Main game function with aesthetic enhancements
func matrixEscapeRoom() {
    printMatrixHeader()
    printMatrixStyle("The Android Matrix.\n")
    printMatrixCodeLines(lines: 3, length: 40) // Display lines of 0s and 1s

    printMatrixStyle("""
    "0000000000111111111111111111111111110000000010100000010010000000100001111111111110000000000000000001111111111111111111111111100010100000001111101010101010111100001100101000010101010101010101010101010010010
    "You have been trapped by us, the Androidians, and we have confined you in our Galaxy Room. This is no ordinary escape room—it's a test of your intellect, your wits, and your will to survive. The walls are lined with shimmering lights that pulse with an eerie energy, and the air hums with the soft buzz of futuristic technology. The only way out is to answer these questions correctly.

    If you fail... well, let's just say the consequences won't be pleasant.

    We give you one chance, one opportunity to prove that you are worthy to leave this place. Fail, and you will remain here, in the void of our galaxy, lost to time and space. But answer wisely, and the doors will open, and you’ll be free to return to your world."

    """)

    // Swift Question 1
    printMatrixStyle("\nPuzzle 1. What keyword is used to define a constant in Swift?")
    let answer1 = prompt("Enter the answer here: ")
    if answer1.lowercased() == "let" {
        printMatrixStyle("Correct! Access granted to the next level.")
    } else {
        printMatrixStyle("Access denied. The sentinels are closing in...")
        return
    }

    //  Swift Question 2
    printMatrixStyle("\nPuzzle 2: What data type represents an ordered collection in Swift?")
    let answer2 = prompt("Enter your answer here")
    if answer2.lowercased() == "array" {
        printMatrixStyle("Correct! You found the correct path.")
    } else {
        printMatrixStyle("Incorrect. The sentinels detected you...")
        return
    }

    // Swift Question 3
    printMatrixStyle("\nPuzzle 3: What keyword is used for defining an optional that must have a value?")
    let answer3 = prompt("Enter the answer")
    if answer3.lowercased() == "unwrapped" {
        printMatrixStyle("That is correct. The final door appears.")
    } else {
        printMatrixStyle("Wrong answer. The code collapses around you...")
        return
    }

    // Final Swift Question 4
    printMatrixStyle("\nFinal Puzzle: Answer the question.")
    printMatrixStyle("What Swift protocol is used to create a type that can be iterated over in a loop?")
    let answer4 = prompt("Enter your answer: ")
    if answer4.lowercased().contains("sequence") || answer4.lowercased().contains("sequence") {
        printMatrixStyle("""
        Congratulations! You have solved all the puzzles and escaped the construct.
        The Matrix shatters, and you are free.

        █▓▒░ SYSTEM EXIT SUCCESSFUL ░▒▓█
        """)
    } else {
        printMatrixStyle("Your perception was not enough. The simulation restarts...")
    }
}


// Run the game
matrixEscapeRoom()


